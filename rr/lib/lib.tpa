
DEFINE_PATCH_FUNCTION set_clab_2da_entries INT_VAR f_MaxLevel = 50 f_Increment = 100 BEGIN
  COUNT_2DA_COLS num_col
  READ_2DA_ENTRIES_NOW r2en num_col
  c = 0
  newrow = r2en + 1
  SPRINT newrow "fl#row%newrow%"
  FOR (i=f_MinLevel;i < num_col AND i <= f_MaxLevel;i += f_Increment) BEGIN
    SPRINT cell ""
    FOR (j = 0;!"%cell%" STRING_EQUAL_CASE "****" AND j < r2en;++j) BEGIN
      READ_2DA_ENTRY_FORMER r2en j i cell
      PATCH_IF "%cell%" STRING_EQUAL_CASE "****" BEGIN
        SET_2DA_ENTRY_LATER s2el j i "%f_Entry%"
      END
    END
    PATCH_IF !"%cell%" STRING_EQUAL_CASE "****" BEGIN
      FOR (j = c;j < i - 1;++j) BEGIN //- 1 because that's where we'd want our entry
        SPRINT newrow "%newrow% ****"
        ++c
      END
      SPRINT newrow "%newrow% %f_Entry%"
      ++c
    END
  END
  SET_2DA_ENTRIES_NOW s2el num_col
  PATCH_IF c > 0 BEGIN
    FOR (i = c;i < num_col - 1;++i) BEGIN //- 1 because num_col includes the row name
      SPRINT newrow "%newrow% ****"
    END
    INSERT_2DA_ROW r2en num_col "%newrow%"
  END
END

DEFINE_PATCH_FUNCTION set_lu_2da_entries STR_VAR f_Replace = "*" f_Icon = "*" f_Strref = "*" f_MinLevel = 1 f_MaxLevel = 99 f_NumAllowed = 16 f_Prereq = "*" f_ExcludedBy = "*" f_Alignment = "*" BEGIN
  COUNT_2DA_COLS num_col
  READ_2DA_ENTRIES_NOW r2en num_col
  SPRINT cell ""
  FOR (i = 0;!"%cell%" STRING_EQUAL_CASE "%f_Replace%" AND !"%cell%" STRING_EQUAL_CASE "*" AND i < r2en;++i) BEGIN
    READ_2DA_ENTRY_FORMER r2en i 1 cell
    PATCH_IF "%cell%" STRING_EQUAL_CASE "%f_Replace%" OR "%cell%" STRING_EQUAL_CASE "*" BEGIN
      SET_2DA_ENTRY_LATER s2el i 1 "%f_Ability%"
      SET_2DA_ENTRY_LATER s2el i 2 "%f_Icon%"
      SET_2DA_ENTRY_LATER s2el i 3 "%f_Strref%"
      SET_2DA_ENTRY_LATER s2el i 4 "%f_MinLevel%"
      SET_2DA_ENTRY_LATER s2el i 5 "%f_MaxLevel%"
      SET_2DA_ENTRY_LATER s2el i 6 "%f_NumAllowed%"
      SET_2DA_ENTRY_LATER s2el i 7 "%f_Prereq%"
      SET_2DA_ENTRY_LATER s2el i 8 "%f_ExcludedBy%"
      SET_2DA_ENTRY_LATER s2el i 9 "%f_Alignment%"
    END
  END
  SET_2DA_ENTRIES_NOW s2el num_col
  PATCH_IF !"%cell%" STRING_EQUAL_CASE "*" AND !"%cell%" STRING_EQUAL_CASE "%f_Replace%" BEGIN //Quite regardless of the fact only so many HLAs fit in the GUI
    newrow = r2en + 1
    SPRINT newrow "fl#row%newrow% %f_Ability% %f_Icon% %f_Strref% %f_MinLevel% %f_MaxLevel% %f_NumAllowed% %f_Prereq% %f_ExcludedBy% %f_Alignment%"
    INSERT_2DA_ROW r2en num_col "%newrow%"
  END
END

// Cure & cause wound spell immunities
DEFINE_PATCH_FUNCTION cure_spell_immunities BEGIN
  PATCH_FOR_EACH resource IN
                 SPPR103                          // Cure Light Wounds
                 SPPR215                          // Cure Medium Wounds  (Spell Revisions)
                 SPPR315                          // Cure Medium Wounds
                 SPPR401                          // Cure Serious Wounds
                 SPPR404                          // Neutralize Poison
                 SPPR502                          // Cure Critical Wounds
                 SPPR514                          // Mass Cure
                 SPPR607                          // Heal
                 SPIN101                          // Cure Light Wounds (Bhaalpower)
                 SPIN551                          // Cause Serious Wounds (Hive Mother)
                 SPIN986                          // Cause Serious Wounds (Beholder)
                 RR#DCSW                          // RR/aTweaks Cause Serious Wounds (Marilith)
                 SPCL211                          // Paladin Lay On Hands
  BEGIN
    READ_ASCII 0 sig (3)
    PATCH_MATCH "%sig%" WITH
      CRE BEGIN
        LPF ADD_CRE_EFFECT
          INT_VAR
            opcode     = 206                      // effect: #206 (Protection from Spell)
            target     = 1                        // target: 1 (self)
            timing     = 9                        // timing mode: 9 (permanent after death)
            parameter1 = 4742                     // param1: string (Spell Ineffective)
          STR_VAR
            resource
        END
      END
      ITM BEGIN
        LPF ADD_ITEM_EQEFFECT
          INT_VAR
            opcode     = 206                      // effect: #206 (Protection from Spell)
            target     = 1                        // target: 1 (self)
            timing     = 2                        // timing mode: 2 (while equipped)
            parameter1 = 4742                     // param1: string (Spell Ineffective)
          STR_VAR
            resource
        END
      END
      DEFAULT
    END
  END
END

DEFINE_PATCH_FUNCTION add_item_onequip_animation STR_VAR resource = "" BEGIN
  PATCH_IF resource STR_CMP "" BEGIN
    LPF ADD_ITEM_EQEFFECT
      INT_VAR
        opcode = 215
        target = 1
        timing = 2
        parameter2 = 1
      STR_VAR
        resource
    END
  END
END

DEFINE_ACTION_FUNCTION get_from_file_by_row_count INT_VAR f_Label_col = 0 STR_VAR f_Label = "" f_File = "" RET f_Value BEGIN
  ACTION_IF "%f_Label%" STR_CMP "" AND "%f_File%" STR_CMP "" BEGIN
    COPY_EXISTING "%f_File%" override
      READ_2DA_ENTRIES_NOW buff 2
      FOR (i = 0; i < buff; ++i) BEGIN
        READ_2DA_ENTRY_FORMER buff i f_Label_col label
        PATCH_IF "%label%" STRING_EQUAL_CASE "%f_Label%" BEGIN
          f_Value = i - 1 // -1 because row 0 is (2DA|IDS) V1.0
          i = buff
        END
      END
    BUT_ONLY
  END
END

DEFINE_ACTION_FUNCTION get_from_file_by_assoc INT_VAR f_Label_col = 0 f_Value_col = 1 STR_VAR f_Label = "" f_File = "" RET f_Value BEGIN
  ACTION_IF "%f_Label%" STR_CMP "" AND "%f_File%" STR_CMP "" BEGIN
    COPY_EXISTING "%f_File%" override
      READ_2DA_ENTRIES_NOW buff 2
      FOR (i = buff - 1; i >= 0; --i) BEGIN
        READ_2DA_ENTRY_FORMER buff i f_Label_col label
        PATCH_IF "%label%" STRING_EQUAL_CASE "%f_Label%" BEGIN
          READ_2DA_ENTRY_FORMER buff i f_Value_col f_Value
          i = "-1"
        END
      END
    BUT_ONLY
  END
END

DEFINE_ACTION_FUNCTION get_sectype STR_VAR f_Label = "" RET f_Value BEGIN
  LAF get_from_file_by_row_count STR_VAR f_Label f_File = msectype.2da RET f_Value = f_Value END
END

DEFINE_ACTION_FUNCTION get_projectile STR_VAR f_Label = "" RET f_Value BEGIN
  LAF get_from_file_by_assoc INT_VAR f_Label_col = 1 f_Value_col = 0 STR_VAR f_Label f_File = missile.ids RET f_Value = f_Value END
END

DEFINE_ACTION_MACRO load_RR#DEATA_var BEGIN
  ACTION_IF !VARIABLE_IS_SET RR#DEATA OR !IS_AN_INT RR#DEATA BEGIN
    LAF get_sectype STR_VAR f_Label = RR#DEATA RET RR#DEATA = f_Value END
  END
END

DEFINE_ACTION_MACRO load_RR#FSCNT_var BEGIN
  ACTION_IF !VARIABLE_IS_SET RR#FSCNT OR !IS_AN_INT RR#FSCNT BEGIN
    LAF get_sectype STR_VAR f_Label = RR#FSCNT RET RR#FSCNT = f_Value END
  END
END

DEFINE_ACTION_MACRO load_RR#VRPO_var BEGIN
  ACTION_IF !VARIABLE_IS_SET RR#VRPO OR !IS_AN_INT RR#VRPO BEGIN
    LAF get_projectile STR_VAR f_Label = RR#VRPO RET RR#VRPO = f_Value END
  END
END

DEFINE_ACTION_MACRO load_RR#VRNP_var BEGIN
  ACTION_IF !VARIABLE_IS_SET RR#VRNP OR !IS_AN_INT RR#VRNP BEGIN
    LAF get_projectile STR_VAR f_Label = RR#VRNP RET RR#VRNP = f_Value END
  END
END

//Load UTF8-encoded tra files if the game is BGEE
DEFINE_ACTION_MACRO bgee_language BEGIN
  ACTION_IF FILE_EXISTS_IN_GAME oh1000.are BEGIN
    LOAD_TRA ~rr/tra/bgee/english/game.tra~
    LOAD_TRA ~rr/tra/bgee/%LANGUAGE%/game.tra~
  END
END

DEFINE_ACTION_FUNCTION set_kit_description STR_VAR f_Kit = "" f_Desc = "" BEGIN
  OUTER_SET strref = "-1"
  COPY_EXISTING kitlist.2da override
    READ_2DA_ENTRIES_NOW kitlist 9
    FOR (i = 0; i < kitlist; ++i) BEGIN
      READ_2DA_ENTRY_FORMER kitlist i 1 kit
      PATCH_IF "%kit%" STRING_EQUAL_CASE "%f_Kit%" BEGIN
        READ_2DA_ENTRY_FORMER kitlist i 4 strref
        i = kitlist
      END
    END
  BUT_ONLY

  ACTION_IF strref > 0 BEGIN
    STRING_SET_EVALUATE strref "%f_Desc%"
  END ELSE PRINT "Kit description for %f_Kit% not set because the kit is unlisted"
END
